generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRATOR
  MANAGER
  HEAD_DEPARTMENT
  DEVELOPER
  SALESMAN
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  passwordHash String  @map("password_hash")
  fullName     String? @map("full_name")
  isActive     Boolean @default(true)
  timezone     String?
  departmentId Int     @map("department_id")
  role         Role

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  assignedTasks Task[]         @relation("assignedTo")
  createdTasks  Task[]         @relation("createdBy")
  notifications Notification[]
  refreshTokens RefreshToken[]
  department    Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("users")
}

enum TaskStatus {
  NEW
  IN_PROGRES
  DONE
  OVERDUE
}

model Task {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  status       TaskStatus @default(NEW)
  priority     Int?       @default(0)
  deadline     DateTime
  assignedToId Int?       @map("assigned_to_id")
  createdById  Int?       @map("created_by_id")

  assignedTo User? @relation("assignedTo", fields: [assignedToId], references: [id])
  createdBy  User? @relation("createdBy", fields: [createdById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tasks")
}

model Notification {
  id     Int     @id @default(autoincrement())
  userId Int     @map("user_id")
  title  String
  data   String
  isRead Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int?     @unique
  tokenHash String   @unique
  expiresAt DateTime @map("expires_at")
  revoked   Boolean  @default(false)

  createdAt DateTime @default(now()) @map("created_at")

  actor User? @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  user User[]

  @@map("departments")
}
