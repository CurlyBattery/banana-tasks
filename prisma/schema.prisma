generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt  @id @default(autoincrement())
  email        String  @unique
  passwordHash String  @map("password_hash")
  fullName     String? @map("full_name")
  isActive     Boolean @default(true)
  timezone     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userRoles     UserRole[]
  assignedTasks Task[]         @relation("assignedTo")
  createdTasks  Task[]         @relation("createdBy")
  Notification  Notification[]
  RefreshToken  RefreshToken[]

  @@map("users")
}

model Role {
  id          Int     @id() @default(autoincrement())
  name        String  @unique
  description String?

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  roleId     Int      @map("role_id")
  userId     BigInt   @map("user_id")
  assignedAt DateTime @default(now())

  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

enum TaskStatus {
  NEW
  IN_PROGRES
  DONE
  OVERDUE
}

model Task {
  id           BigInt     @id @default(autoincrement())
  title        String
  description  String?
  status       TaskStatus @default(NEW)
  priority     Int?       @default(0)
  deadline     DateTime
  assignedToId BigInt?    @map("assigned_to_id")
  createdById  BigInt?    @map("created_by_id")

  assignedTo User? @relation("assignedTo", fields: [assignedToId], references: [id])
  createdBy  User? @relation("createdBy", fields: [createdById], references: [id])

  @@map("tasks")
}

model Notification {
  id      BigInt  @id @default(autoincrement())
  userId  BigInt  @map("user_id")
  type    String
  payload Json?
  isRead  Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model RefreshToken {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt?
  tokenHash String
  expiresAt DateTime @map("expires_at")
  revoked   Boolean  @default(false)

  createdAt DateTime @default(now()) @map("created_at")

  actor User? @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  @@map("departments")
}
